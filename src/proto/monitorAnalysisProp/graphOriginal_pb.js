// source: graphOriginal.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

let jspb = require('google-protobuf');

let goog = jspb;
let global = Function('return this')();

goog.exportSymbol('proto.GraphOriginalProto', null, global);
goog.exportSymbol('proto.GraphOriginalProto.Original', null, global);
goog.exportSymbol('proto.GraphOriginalProto.Original.OriginalData', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GraphOriginalProto = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GraphOriginalProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
   * @public
   * @override
   */
    proto.GraphOriginalProto.displayName = 'proto.GraphOriginalProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GraphOriginalProto.Original = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GraphOriginalProto.Original, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
   * @public
   * @override
   */
    proto.GraphOriginalProto.Original.displayName = 'proto.GraphOriginalProto.Original';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GraphOriginalProto.Original.OriginalData = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.GraphOriginalProto.Original.OriginalData.repeatedFields_, null);
};
goog.inherits(proto.GraphOriginalProto.Original.OriginalData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
   * @public
   * @override
   */
    proto.GraphOriginalProto.Original.OriginalData.displayName = 'proto.GraphOriginalProto.Original.OriginalData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
    proto.GraphOriginalProto.prototype.toObject = function (opt_includeInstance) {
        return proto.GraphOriginalProto.toObject(opt_includeInstance, this);
    };


    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GraphOriginalProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
    proto.GraphOriginalProto.toObject = function (includeInstance, msg) {
        let f; let
            obj = {
                starttime: jspb.Message.getFieldWithDefault(msg, 1, 0),
                frequency: jspb.Message.getFieldWithDefault(msg, 2, 0),
                original: (f = msg.getOriginal()) && proto.GraphOriginalProto.Original.toObject(includeInstance, f),
            };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GraphOriginalProto}
 */
proto.GraphOriginalProto.deserializeBinary = function (bytes) {
    let reader = new jspb.BinaryReader(bytes);
    let msg = new proto.GraphOriginalProto();
    return proto.GraphOriginalProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GraphOriginalProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GraphOriginalProto}
 */
proto.GraphOriginalProto.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        let field = reader.getFieldNumber();
        switch (field) {
        case 1:
            var value = /** @type {number} */ (reader.readInt64());
            msg.setStarttime(value);
            break;
        case 2:
            var value = /** @type {number} */ (reader.readInt32());
            msg.setFrequency(value);
            break;
        case 3:
            var value = new proto.GraphOriginalProto.Original();
            reader.readMessage(value, proto.GraphOriginalProto.Original.deserializeBinaryFromReader);
            msg.setOriginal(value);
            break;
        default:
            reader.skipField();
            break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GraphOriginalProto.prototype.serializeBinary = function () {
    let writer = new jspb.BinaryWriter();
    proto.GraphOriginalProto.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GraphOriginalProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GraphOriginalProto.serializeBinaryToWriter = function (message, writer) {
    let f;
    f = message.getStarttime();
    if (f !== 0) {
        writer.writeInt64(
            1,
            f,
        );
    }
    f = message.getFrequency();
    if (f !== 0) {
        writer.writeInt32(
            2,
            f,
        );
    }
    f = message.getOriginal();
    if (f != null) {
        writer.writeMessage(
            3,
            f,
            proto.GraphOriginalProto.Original.serializeBinaryToWriter,
        );
    }
};


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
    proto.GraphOriginalProto.Original.prototype.toObject = function (opt_includeInstance) {
        return proto.GraphOriginalProto.Original.toObject(opt_includeInstance, this);
    };


    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GraphOriginalProto.Original} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
    proto.GraphOriginalProto.Original.toObject = function (includeInstance, msg) {
        let f; let
            obj = {
                maxline: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
                minline: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
                data: (f = msg.getData()) && proto.GraphOriginalProto.Original.OriginalData.toObject(includeInstance, f),
            };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GraphOriginalProto.Original}
 */
proto.GraphOriginalProto.Original.deserializeBinary = function (bytes) {
    let reader = new jspb.BinaryReader(bytes);
    let msg = new proto.GraphOriginalProto.Original();
    return proto.GraphOriginalProto.Original.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GraphOriginalProto.Original} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GraphOriginalProto.Original}
 */
proto.GraphOriginalProto.Original.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        let field = reader.getFieldNumber();
        switch (field) {
        case 1:
            var value = /** @type {number} */ (reader.readDouble());
            msg.setMaxline(value);
            break;
        case 2:
            var value = /** @type {number} */ (reader.readDouble());
            msg.setMinline(value);
            break;
        case 3:
            var value = new proto.GraphOriginalProto.Original.OriginalData();
            reader.readMessage(value, proto.GraphOriginalProto.Original.OriginalData.deserializeBinaryFromReader);
            msg.setData(value);
            break;
        default:
            reader.skipField();
            break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GraphOriginalProto.Original.prototype.serializeBinary = function () {
    let writer = new jspb.BinaryWriter();
    proto.GraphOriginalProto.Original.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GraphOriginalProto.Original} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GraphOriginalProto.Original.serializeBinaryToWriter = function (message, writer) {
    let f;
    f = message.getMaxline();
    if (f !== 0.0) {
        writer.writeDouble(
            1,
            f,
        );
    }
    f = message.getMinline();
    if (f !== 0.0) {
        writer.writeDouble(
            2,
            f,
        );
    }
    f = message.getData();
    if (f != null) {
        writer.writeMessage(
            3,
            f,
            proto.GraphOriginalProto.Original.OriginalData.serializeBinaryToWriter,
        );
    }
};


/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GraphOriginalProto.Original.OriginalData.repeatedFields_ = [1];


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
    proto.GraphOriginalProto.Original.OriginalData.prototype.toObject = function (opt_includeInstance) {
        return proto.GraphOriginalProto.Original.OriginalData.toObject(opt_includeInstance, this);
    };


    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GraphOriginalProto.Original.OriginalData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
    proto.GraphOriginalProto.Original.OriginalData.toObject = function (includeInstance, msg) {
        let f; let
            obj = {
                dataList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f,
            };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GraphOriginalProto.Original.OriginalData}
 */
proto.GraphOriginalProto.Original.OriginalData.deserializeBinary = function (bytes) {
    let reader = new jspb.BinaryReader(bytes);
    let msg = new proto.GraphOriginalProto.Original.OriginalData();
    return proto.GraphOriginalProto.Original.OriginalData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GraphOriginalProto.Original.OriginalData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GraphOriginalProto.Original.OriginalData}
 */
proto.GraphOriginalProto.Original.OriginalData.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        let field = reader.getFieldNumber();
        switch (field) {
        case 1:
            var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
            msg.setDataList(value);
            break;
        default:
            reader.skipField();
            break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GraphOriginalProto.Original.OriginalData.prototype.serializeBinary = function () {
    let writer = new jspb.BinaryWriter();
    proto.GraphOriginalProto.Original.OriginalData.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GraphOriginalProto.Original.OriginalData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GraphOriginalProto.Original.OriginalData.serializeBinaryToWriter = function (message, writer) {
    let f;
    f = message.getDataList();
    if (f.length > 0) {
        writer.writePackedDouble(
            1,
            f,
        );
    }
};


/**
 * repeated double data = 1;
 * @return {!Array<number>}
 */
proto.GraphOriginalProto.Original.OriginalData.prototype.getDataList = function () {
    return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/** @param {!Array<number>} value */
proto.GraphOriginalProto.Original.OriginalData.prototype.setDataList = function (value) {
    jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.GraphOriginalProto.Original.OriginalData.prototype.addData = function (value, opt_index) {
    jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.GraphOriginalProto.Original.OriginalData.prototype.clearDataList = function () {
    this.setDataList([]);
};


/**
 * optional double maxLine = 1;
 * @return {number}
 */
proto.GraphOriginalProto.Original.prototype.getMaxline = function () {
    return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.GraphOriginalProto.Original.prototype.setMaxline = function (value) {
    jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double minLine = 2;
 * @return {number}
 */
proto.GraphOriginalProto.Original.prototype.getMinline = function () {
    return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.GraphOriginalProto.Original.prototype.setMinline = function (value) {
    jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional OriginalData data = 3;
 * @return {?proto.GraphOriginalProto.Original.OriginalData}
 */
proto.GraphOriginalProto.Original.prototype.getData = function () {
    return /** @type{?proto.GraphOriginalProto.Original.OriginalData} */ (
        jspb.Message.getWrapperField(this, proto.GraphOriginalProto.Original.OriginalData, 3));
};


/** @param {?proto.GraphOriginalProto.Original.OriginalData|undefined} value */
proto.GraphOriginalProto.Original.prototype.setData = function (value) {
    jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.GraphOriginalProto.Original.prototype.clearData = function () {
    this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GraphOriginalProto.Original.prototype.hasData = function () {
    return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 startTime = 1;
 * @return {number}
 */
proto.GraphOriginalProto.prototype.getStarttime = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.GraphOriginalProto.prototype.setStarttime = function (value) {
    jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 frequency = 2;
 * @return {number}
 */
proto.GraphOriginalProto.prototype.getFrequency = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GraphOriginalProto.prototype.setFrequency = function (value) {
    jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Original original = 3;
 * @return {?proto.GraphOriginalProto.Original}
 */
proto.GraphOriginalProto.prototype.getOriginal = function () {
    return /** @type{?proto.GraphOriginalProto.Original} */ (
        jspb.Message.getWrapperField(this, proto.GraphOriginalProto.Original, 3));
};


/** @param {?proto.GraphOriginalProto.Original|undefined} value */
proto.GraphOriginalProto.prototype.setOriginal = function (value) {
    jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.GraphOriginalProto.prototype.clearOriginal = function () {
    this.setOriginal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GraphOriginalProto.prototype.hasOriginal = function () {
    return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto);
