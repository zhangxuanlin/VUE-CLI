// source: demo.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

let jspb = require('google-protobuf');

let goog = jspb;
let global = Function('return this')();

goog.exportSymbol('proto.DemoProto', null, global);
goog.exportSymbol('proto.DemoProto.Point', null, global);
goog.exportSymbol('proto.DemoProto.Points', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DemoProto = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.DemoProto.repeatedFields_, null);
};
goog.inherits(proto.DemoProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
   * @public
   * @override
   */
    proto.DemoProto.displayName = 'proto.DemoProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DemoProto.Points = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.DemoProto.Points.repeatedFields_, null);
};
goog.inherits(proto.DemoProto.Points, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
   * @public
   * @override
   */
    proto.DemoProto.Points.displayName = 'proto.DemoProto.Points';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DemoProto.Point = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DemoProto.Point, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
   * @public
   * @override
   */
    proto.DemoProto.Point.displayName = 'proto.DemoProto.Point';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DemoProto.repeatedFields_ = [1];


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
    proto.DemoProto.prototype.toObject = function (opt_includeInstance) {
        return proto.DemoProto.toObject(opt_includeInstance, this);
    };


    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DemoProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
    proto.DemoProto.toObject = function (includeInstance, msg) {
        let f; let
            obj = {
                dblistList: jspb.Message.toObjectList(msg.getDblistList(),
                    proto.DemoProto.Points.toObject, includeInstance),
            };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DemoProto}
 */
proto.DemoProto.deserializeBinary = function (bytes) {
    let reader = new jspb.BinaryReader(bytes);
    let msg = new proto.DemoProto();
    return proto.DemoProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DemoProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DemoProto}
 */
proto.DemoProto.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        let field = reader.getFieldNumber();
        switch (field) {
        case 1:
            var value = new proto.DemoProto.Points();
            reader.readMessage(value, proto.DemoProto.Points.deserializeBinaryFromReader);
            msg.addDblist(value);
            break;
        default:
            reader.skipField();
            break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DemoProto.prototype.serializeBinary = function () {
    let writer = new jspb.BinaryWriter();
    proto.DemoProto.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DemoProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DemoProto.serializeBinaryToWriter = function (message, writer) {
    let f;
    f = message.getDblistList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            1,
            f,
            proto.DemoProto.Points.serializeBinaryToWriter,
        );
    }
};


/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DemoProto.Points.repeatedFields_ = [1];


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
    proto.DemoProto.Points.prototype.toObject = function (opt_includeInstance) {
        return proto.DemoProto.Points.toObject(opt_includeInstance, this);
    };


    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DemoProto.Points} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
    proto.DemoProto.Points.toObject = function (includeInstance, msg) {
        let f; let
            obj = {
                pointsList: jspb.Message.toObjectList(msg.getPointsList(),
                    proto.DemoProto.Point.toObject, includeInstance),
            };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DemoProto.Points}
 */
proto.DemoProto.Points.deserializeBinary = function (bytes) {
    let reader = new jspb.BinaryReader(bytes);
    let msg = new proto.DemoProto.Points();
    return proto.DemoProto.Points.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DemoProto.Points} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DemoProto.Points}
 */
proto.DemoProto.Points.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        let field = reader.getFieldNumber();
        switch (field) {
        case 1:
            var value = new proto.DemoProto.Point();
            reader.readMessage(value, proto.DemoProto.Point.deserializeBinaryFromReader);
            msg.addPoints(value);
            break;
        default:
            reader.skipField();
            break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DemoProto.Points.prototype.serializeBinary = function () {
    let writer = new jspb.BinaryWriter();
    proto.DemoProto.Points.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DemoProto.Points} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DemoProto.Points.serializeBinaryToWriter = function (message, writer) {
    let f;
    f = message.getPointsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            1,
            f,
            proto.DemoProto.Point.serializeBinaryToWriter,
        );
    }
};


/**
 * repeated Point points = 1;
 * @return {!Array<!proto.DemoProto.Point>}
 */
proto.DemoProto.Points.prototype.getPointsList = function () {
    return /** @type{!Array<!proto.DemoProto.Point>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.DemoProto.Point, 1));
};


/** @param {!Array<!proto.DemoProto.Point>} value */
proto.DemoProto.Points.prototype.setPointsList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.DemoProto.Point=} opt_value
 * @param {number=} opt_index
 * @return {!proto.DemoProto.Point}
 */
proto.DemoProto.Points.prototype.addPoints = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.DemoProto.Point, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.DemoProto.Points.prototype.clearPointsList = function () {
    this.setPointsList([]);
};


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
    proto.DemoProto.Point.prototype.toObject = function (opt_includeInstance) {
        return proto.DemoProto.Point.toObject(opt_includeInstance, this);
    };


    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DemoProto.Point} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
    proto.DemoProto.Point.toObject = function (includeInstance, msg) {
        let f; let
            obj = {
                tagsample: jspb.Message.getFieldWithDefault(msg, 1, 0),
                ai2val: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
                processstatus: jspb.Message.getFieldWithDefault(msg, 3, 0),
            };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DemoProto.Point}
 */
proto.DemoProto.Point.deserializeBinary = function (bytes) {
    let reader = new jspb.BinaryReader(bytes);
    let msg = new proto.DemoProto.Point();
    return proto.DemoProto.Point.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DemoProto.Point} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DemoProto.Point}
 */
proto.DemoProto.Point.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        let field = reader.getFieldNumber();
        switch (field) {
        case 1:
            var value = /** @type {number} */ (reader.readInt64());
            msg.setTagsample(value);
            break;
        case 2:
            var value = /** @type {number} */ (reader.readDouble());
            msg.setAi2val(value);
            break;
        case 3:
            var value = /** @type {number} */ (reader.readInt32());
            msg.setProcessstatus(value);
            break;
        default:
            reader.skipField();
            break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DemoProto.Point.prototype.serializeBinary = function () {
    let writer = new jspb.BinaryWriter();
    proto.DemoProto.Point.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DemoProto.Point} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DemoProto.Point.serializeBinaryToWriter = function (message, writer) {
    let f;
    f = message.getTagsample();
    if (f !== 0) {
        writer.writeInt64(
            1,
            f,
        );
    }
    f = message.getAi2val();
    if (f !== 0.0) {
        writer.writeDouble(
            2,
            f,
        );
    }
    f = message.getProcessstatus();
    if (f !== 0) {
        writer.writeInt32(
            3,
            f,
        );
    }
};


/**
 * optional int64 tagSample = 1;
 * @return {number}
 */
proto.DemoProto.Point.prototype.getTagsample = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.DemoProto.Point.prototype.setTagsample = function (value) {
    jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional double ai2val = 2;
 * @return {number}
 */
proto.DemoProto.Point.prototype.getAi2val = function () {
    return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.DemoProto.Point.prototype.setAi2val = function (value) {
    jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional int32 processStatus = 3;
 * @return {number}
 */
proto.DemoProto.Point.prototype.getProcessstatus = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.DemoProto.Point.prototype.setProcessstatus = function (value) {
    jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated Points dbList = 1;
 * @return {!Array<!proto.DemoProto.Points>}
 */
proto.DemoProto.prototype.getDblistList = function () {
    return /** @type{!Array<!proto.DemoProto.Points>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.DemoProto.Points, 1));
};


/** @param {!Array<!proto.DemoProto.Points>} value */
proto.DemoProto.prototype.setDblistList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.DemoProto.Points=} opt_value
 * @param {number=} opt_index
 * @return {!proto.DemoProto.Points}
 */
proto.DemoProto.prototype.addDblist = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.DemoProto.Points, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.DemoProto.prototype.clearDblistList = function () {
    this.setDblistList([]);
};


goog.object.extend(exports, proto);
